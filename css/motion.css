html { 
    box-sizing: border-box;
    font-family: sans-serif;
    font-size: 16px;
    overflow-x: hidden;
}
*, 
*::before, 
*::after { 
    box-sizing: border-box;
}

body { margin: 0}

h3{ margin-top: 7rem }

.box {
    border: thick solid #000;
    margin: 5rem auto;
    width: 200px;
    height: 200px;
}

.card {
    border: thick solid #000;
    margin: 5rem auto;
    width: 600px;
    height: 400px;
}

.card img{
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: 0 50%;

}

/* TRANSICIONES */
/*
    transition-property
    transition-duration
    transition-timing-function: linear, ease, ease-in, ease-out, ease-in-out, steps
    transition-delay
    transition: property duration timing-function delay (shorthand)

    https://developer.mozilla.org/en-US/docs/Web/CSS/animation

    Las transiciones se aplican aunque no se pase el mouse por encima de la caja. Esto ocurre porque la transición opera según el algoritmo de CSS. La caja box tiene indicada la propiedad-background 'magenta', y en transition está indicada esta propiedad. Por tanto, cuando el navegador carga, pasa del color por defecto 'transparente' a 'magenta', que es el color de la caja que le hemos indicado. Después, al pasar el mouse por encima, cambia de color, porque le hemos indicado una selector de :hover. 
    Para evitar la transisción automática del color, habría que
    indicar a la caja un background-color: white. 
    Con border-color no se crea este efecto de inicio, porque 
    anteriormente a la caja se le ha indicado un border: thick solid black, por tanto, ya es negro de inicio y no cambia a
    cyan si no se pasa por encima. 
*/

.transitions .box {
    background-color: magenta;
    transition-property: background-color;
    transition-duration: 500ms;
    transition-timing-function: ease;
    transition-delay: .5s;
    transition: border-color 2s linear 1s;
    /*transition: all 2s ease-in-out 250ms; aplica varias transiciones al mismo tiempo. Mala práctica porque aplica
    a todas las propiedades del elemento que se han definido */
    transition: background-color 2s ease-in-out 250ms, 
        border-color 2s ease-in-out 250ms, border 2s ease-in-out 250ms, border-radius 2s ease-in-out 250ms
}

.transitions .box:hover {
    background-color: cyan;
    border-color: red;
    border-radius: 2rem;
    /*border-style: dashed; no todas las propiedades son animables*/
}

.transitions .card {
    transition: opacity 1s ease-out, border-color 3s steps(3),
    filter 2s ease-in 1s, box-shadow 1.5s linear 2s;
}

.transitions .card:hover {
    opacity: .75;
    border-color: orchid;
    filter: blur(.15rem);
    box-shadow: 1rem 1rem 2rem .5rem #000;
}

.transitions .card img {
    transition: object-position 2s ease-in-out 3s;
}

.transitions .card img:hover {
    object-position: 100% 50%;
}

/* TRANSFORMACIONES */

.transform-2d img{ transition: transform 1s ease-in-out; }

.transform-2d img:hover {
    transform:none; /* por defecto */
    transform: translateX(2rem);
    transform: translateY(2rem);
    transform: translateZ(2rem); /* no aplica porque necesitamos aplicar perspectiva 3d*/
    transform: translateY(-2rem);
    transform: translate(-2rem, 4rem); /* x,y*/
    transform: translate(-20%, -20%); /* x,y*/
    transform: scaleX(2);
    transform: scaleY(2);
    transform: scale(1.2);
    transform: scale(.6);
    transform: scale(-1.5, 2); /* se invierte y escala */
    transform: rotateX(60deg);
    transform: rotateX(90deg);
    transform: rotateX(180deg);
    transform: rotateY(60deg);
    transform: rotateY(90deg);
    transform: rotateY(180deg);
    transform: rotateZ(60deg);
    transform: rotateZ(-180deg);
    transform: rotate(270deg); /*mismo efecto que Z*/
    transform: skewX(20deg);
    transform: skewX(-60deg);
    transform: skewY(30deg);
    transform: skewY(-30deg);
    transform: skew(20deg, 20deg);

    /*
    matrix(sacaleX(), skewY(), skewX(), scaleY(), transalteX(), transalteY())

    https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix
    */

    transform: matrix(1,2,2,1,20,10);
    transform: translate(25%, -50%);
    transform: translate(25%, -50%) rotate(240deg) skew(10deg, 20deg) scale(.5);

}

.transform-3d { perspective: 100px} /*aplicamos al elemento padre*/

.transform-3d img{ transition: transform 1s ease-in-out; }

 /* se debe aplicar la perspectiva*/
.transform-3d img:hover {
    transform: translateZ(2rem);
    transform: perspective(100px) translateZ(2rem); /*mayor perspectiva menor movimiento */
    transform: translateZ(-2rem); /*la perspectiva se ha aplicado al elemento padre */
    transform: translate3d(2rem, 50%, -3rem);
    transform: scaleZ(1.5); /* le falta volumen para ver como funciona */
    transform: scale3d(2, .5, 3 );
    transform: rotateX(90deg);
    transform: rotateX(30deg);
    transform: rotateY(90deg);
    transform: rotateY(-30deg);
    transform: rotate3d(1,1,1, 45deg);
    transform: rotate3d(-1,.5,0, -45deg);

    /*
    https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate3d

    https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale3d

    https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate3d
    */

    transform: matrix3d(1,0,0,0,0,1,6,0,0,0,1,0,50,100,0,1.1);

    /*
    https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d
    */

    transform: rotate3d(-1,2.4,-2,60deg) translate3d(2rem, 50%, -3rem) scale3d(2,-.5,3);

}

/* Origen de transformación */

.transform-origin img {
    transition: transform 1s ease-in-out;
    /* transform-origin: x y z; */
    transform-origin: 50% 50% 0; /* por defecto */
    transform-origin: 0 0; 
    transform-origin: 0; 
    transform-origin: top left; 
    transform-origin: top center; 
    transform-origin: bottom right; 
    transform-origin: center right; 
    transform-origin: -2rem -3rem; 
    transform-origin: 2rem 5rem; 
    transform-origin: 10rem 50%; 
}

.transform-origin img:hover {
    transform: rotate(360deg);
    
}

/* FLIP CARD */
.flip-card-1,
.flip-card-2{
    border: thick solid #000;
    margin: 5rem auto;
    width: 600px;
    height: 400px;
    position: relative;
    cursor: pointer;
    transition: transform 1s ease-in-out;
    perspective: 10rem;
    /* como se comportan los elementos hijos */
    transform-style: flat; /* por defecto*/
    transform-style: preserve-3d; /*los hijos tienen su propia perspectiva*/
}

.flip-card-2 { transform-origin: center right;}

.flip-card-1:hover { transform: rotateY(180deg);}

.flip-card-2:hover { 
    transform: translateX(-100%) rotateY(-180deg);
}


.flip-card-1 img,
.flip-card-2 img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: 0 50%;
}

.flip-face {
    position: absolute;
    width: 100%;
    height: 100%;

    /* backface-visibility. Determina como se visualizan las caras. Visible y hidden. Necesita de perspectiva 3d y
    de transform-style, para indicar como se comportan las cajas hijas. Preserve-3d. */
    backface-visibility: visible;
    backface-visibility: hidden;
}

.flip-front {
    transform: rotateX(0);
    transform: rotateY(0);
}
.flip-back {
    transform: rotateX(180deg);
    transform: rotateY(180deg);
}

/* ANIMACIONES */
/*  
8 propiedades de animación.
    animation: name duration timing-function delay iteration-count direction fill-mode;
obligado: name y duration.
*/
.my-animation {
    animation-name: myAwesomeAnimation;
    animation-duration: 2s;
    animation-timing-function: cubic-bezier(1,0,0,1);
    animation-timing-function: cubic-bezier(.33,.92,.92,.36);
    animation-timing-function: ease-in-out;
    animation-delay: 1s;
    animation-iteration-count: 2; /*repetciiones*/
    animation-iteration-count: infinite; /* infinito*/
    animation-iteration-count: 1; /* por defecto */
    animation-direction: reverse;
    animation-direction: alternate-reverse;
    animation-direction: alternate; /*va hasta el final y regresa*/
    animation-direction: normal; /*por defecto*/
    animation-fill-mode: none; /*por defecto */
    animation-fill-mode: forwards; /*al final se queda con los estilos de la animación*/
    animation-fill-mode: backwards; /*al inicio de la animación aplica los estilos */
    animation-fill-mode: both; /*aplica al mismo tiemop el valor de forwards y backwards */
    animation-play-state: paused; /* pausa la animación. Es útil para aplicarla con JavaScript */
    animation-play-state: running; /* por defecto */
    animation: myAwesomeAnimation 1.5s ease 250ms 7 alternate both running;
    animation: myAwesomeAnimation 1s;
}

/* el keyframe se puede entender como la línea del tiempo de la animación. Se utiliza el nombre de la animación para refernciarla.*/

@keyframes myAwesomeAnimation {
    from {
        opacity: 0;
        transform: translateX(0);
    }

    to{
        opacity: 1;
        transform: translateX(100%);
    }
}

/*
https://cubic-bezier.com/#.17,.67,.83,.67
*/

.my-animation-2 {
    animation: myAwesomeAnimation2 2s;
}

@keyframes myAwesomeAnimation2 {
    0%{
        opacity: 0;
        transform: translateX(0);
    }


    50%{
        opacity: .5;
        transform:translateX(-50%);
    }

    75%{
        opacity: .5;
        transform:translateX(0%);
    }


    100%{
        opacity: 1;
        transform:translateX(100%);
    }
}

.animation-multiple {
    animation: multipleAnimation1 2s,
    multipleAnimation2 2s;

}

@keyframes multipleAnimation1 {
    0%{
        opacity: 0;

    }

    50%{
        opacity: .5;

    }

    100%{
        opacity: 1;
    }
}

@keyframes multipleAnimation2 {
    0%{
        transform: translateY(0);

    }

    50%{
        transform: translateY(-100%);

    }

    100%{
        transform: translateY(0);
    }
}

/* MOTION EXAMPLES */

.motion-examples {
    text-align: center;
}

/* FADE IN - FADE OUT */
.fade-in {
    font-size: 5rem;
    animation: fadeIn 2s linear 2s infinite alternate both;
}

.fade-out{
    font-size: 5rem;
    animation: fadeOut 2s linear 2s infinite alternate both;
}

@keyframes fadeIn {
    0%{
        opacity:0;
    }

    100%{
        opacity:1;
    }
}

@keyframes fadeOut {
    0%{
        opacity: 1;
    }

    100%{
        opacity: 0;  
    }
}

/* SHAKE */

@keyframes shake {
    10%, 
    90%{
        transform: translate(-1px, 0);
    }
    20%,
    80%{
        transform: translate(2px, 0);
    }
    30%,
    50%,
    70%{
        transform: translate(-4px, 0);
    }
    40%,
    60%{
        transform: translate(4px, 0);
    }
}

.shake {
    font-size: 5rem;
    cursor: pointer;
    display: inline-block;
}

.shake:hover {
    animation: shake 1s cubic-bezier(0.36, 0.37, 0.19, 0.97) both;
    transform: translate(0,0);
}

/* PULSE */

.pulse {
    font-size: 5rem;
    animation: pulse 1s linear;
}

@keyframes pulse {
    0% {
        transform: scale(1.1);
    }
    50% {
        transform: scale(.8);
    }
    100% {
        transform: scale(1);
    }
}


.heart {
    position:relative;
    width: 10vw;
    height: 10vw;
    margin: 0 auto;
    animation: pulse 1s;
}

@keyframes heartColor {
    10% {
        background-color: #d00;
    }
}

.heart::after,
.heart::before {
    position: absolute;
    content:'';
    left: 5vw;
    top: 0;
    width: 5vw;
    height: 8vw;
    background-color: #a00;
    transform: rotate(-45deg);
    transform-origin: 0 100%;
    border-radius: 5vw 5vw 0 0;
    animation: heartColor 1s;

}

.heart::after{
    left:0;
    transform: rotate(45deg);
    transform-origin: 100% 100%;
}

/* SPINNER */

.spinner {
    /* background-color: aqua; */
    width: 5vw;
    height: 5vw;
    margin: 0 auto;
    border-radius: 50%;
    border: .5vw solid rgba(0,0,0, .1);
    border-left-color: #09f;
    animation: spinner 1s ease-out;
}

@keyframes spinner {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}

/* BOTONES */

.btn {
    position: relative;
    border: none;
    border-radius: .25rem;
    padding: .2rem;
    width: 15rem;
    height: 2.5rem;
    font-size: 1.25rem;
    font-weight: bold;
    cursor: pointer;
    overflow: hidden;
    box-shadow: .25rem .25rem .5rem .25rem rgba(0,0,0,.2);
} 

.anim-bottom::after{
    content: '';
    position: absolute;
    bottom:0;
    width: 0;
    height: .25rem;
    background-color: #d00;
    transition: width .5s ease, left .5s ease, right .5s ease;
}

.anim-bottom:hover::after{
    width: 100%;
}

.to-left::after {
    left:0;
}

.to-center::after{
    left: 50%
}
.to-center:hover::after{
    left: 0
}

.to-right::after{
    right: 0
}

.anim-bg-gradient {
    background-image: linear-gradient(to right, pink, violet, orange, orangered);
    background-size: 300% 100%;
    transition: background-position .5s ease-in-out;
}

.anim-bg-gradient:hover {
    background-position: 100% 0;
}

/* MENÚ DE PESTAÑAS */


.tabs-menu {
    position: relative;
    margin: 0 auto;
    background-color: aqua;
    padding: 1rem;
    border-radius: 1rem;
    width: 70%;
    height: 3rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.tabs-menu input[type="radio"]{
    display: none;
}

.tabs-menu label {
    position: relative;
    z-index: 1;
    text-align: center;
    cursor: pointer;
    width: calc(100% / 4 - 0.5rem);
}

.tabs-menu label:hover {
    color: white;
}

.tabs-menu input[type="radio"]:checked+label {
    color: white;
}

.tab-bg-hover {
    position: absolute;
    width: calc(100% / 4 - 0.5rem);
    height: 2rem;
    border-radius: .5rem;
    background-image: linear-gradient(90deg, #a00, #d00);
    transition: transform 300ms ease-in-out;
}

#tab-1:checked ~ .tab-bg-hover { transform: translateX(0);}
#tab-2:checked ~ .tab-bg-hover { transform: translateX(100%);}
#tab-3:checked ~ .tab-bg-hover { transform: translateX(200%);}
#tab-4:checked ~ .tab-bg-hover { transform: translateX(300%);}


.off-canvas-btn {
    position: fixed;
    bottom: 5rem; 
    right: 1rem;
    z-index: 999;
    height: 3rem;
    width: 3rem;
    cursor: pointer;
    opacity: 1;
}

.off-canvas-burger {
    position: fixed;
    bottom: 7rem; 
    right: 1rem;
    z-index: 998;
    height: .6rem;
    width: 3rem;
    background-color: #a00;
    border-radius: .3rem;
    transform: rotate(0deg) translate  (0, -1.2rem);
    transform-origin: top left;
    transition: transform .5s ease, background-color 500ms ease;
}

.off-canvas-burger::before,
.off-canvas-burger::after {
    content: '';
    display: block;
    width: 100%;
    height: .6rem;
    background-color: #a00;
    border-radius: .3rem;
    transition: transform .5s ease;
}

.off-canvas-burger::before {
    transform: rotate(0deg) translate(0, -.9rem);
  
}

.off-canvas-burger::after {
    transform: rotate(0deg) translate(0, .3rem);
   
}

.off-canvas-btn:checked + .off-canvas-burger {
    background-color: transparent;
}

.off-canvas-btn:checked + .off-canvas-burger::before {
    transform: rotate(45deg) translate(0,0);
}

.off-canvas-btn:checked + .off-canvas-burger::after {
    transform: rotate(-45deg) translate(.4rem,-.5rem);
}

/* MENU OFF CANVAS */

.off-canvas-menu {
    position: fixed;
    top:0;
    left:0;
    bottom:0;
    right:0;
    background-color: #0008;
    z-index: 997;
    display: flex;
    justify-content: center;
    align-items: center;
    transform: translate(0, -100%);
    transform: translate(0, 100%);
    transform: translate(-100%, 0);
    transform: translate(100%, 0);
    transition: transform 500ms ease-in-out;
}

.off-canvas-btn:checked ~ .off-canvas-menu {
    transform: translate(0,0);
}

.off-canvas-menu-container {
    width: 100%;
    height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.off-canvas-link {
    padding: 2rem;
    border-bottom: thin solid #d00;
    font-size: 2rem;
    text-decoration: none;
    color: #fff;
    transition: background-color 300ms ease;
}

.off-canvas-link:first-child {
    border-top: thin solid #d00;
}

.off-canvas-link:hover {
    background-color: #d005;
}

/* MODAL */

.modal{
    position: fixed;
    top:0;
    left:0;
    bottom:0;
    right:0;
    background-color: #0008;
    z-index: 997;
    display: flex;
    justify-content: center;
    opacity: 0;
    pointer-events: none;
    align-items: center;
    transition: opacity 500ms ease-in-out;
}

.modal:target {
    opacity: 1;
    pointer-events: auto;
}

.modal-container {
    position: relative;
    border: thick double #d00;
    border-radius: 1rem;
    padding: 2rem;
    background-color: #fff;
    width: 50%;
    height: 50vh;
    display: flex;
    flex-direction: column;
    text-align: left;
    overflow: hidden;
}

.modal-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    width: 3rem;
    height: 3rem;
    font-size: 2rem;
    font-weight: bold;
    color: #fff;
    background-color: #a00;
    text-align: center;
    line-height: 3rem;
    text-decoration: none;
    border-radius: 50%;

    transition: background-color 300ms linear, transform 300ms ease-in-out;
}

.modal-close:hover {
    background-color: #a00;
    transform: scale(1.1);
}

/* STAR WARS INTRO */

.star-wars {
    margin: 0 auto;
    width: 100%;
    height: 100vh;
    overflow: hidden;
    color: #ffb13a;
    background-image: url(../assets/stars.gif);
}

.star-wars-container {
    margin: 0 auto;
    width: 80%;
    text-align: justify;
    letter-spacing: .1rem;
    animation: introStarWars 20s infinite linear;
}

.star-wars h2,
.star-wars h3 {
    font-size: 5rem;
    text-align: center;
}

.star-wars p{
    font-size: 4rem;
    line-height: 4rem;
}

@keyframes introStarWars {
    0%{
        transform: perspective(100vh) rotateX(30deg) translateY(100%)
    }

    100%{
        transform: perspective(100vh) rotateX(25deg) translateY(-200%)
    }
    
}

